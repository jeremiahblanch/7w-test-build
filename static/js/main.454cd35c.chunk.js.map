{"version":3,"sources":["Card.js","Panel.js","mocks.js","App.js","serviceWorker.js","index.js"],"names":["Anchor","styled","a","Img","img","Meta","div","ChannelBrand","Title","h4","Card","id","image","onClick","title","handle","replace","href","ev","stopPropagation","preventDefault","aria-describedby","src","alt","Outer","props","visible","Panel","show","key","split","map","prefix","pt","trim","filter","Container","App","useState","selection","setSelection","wantPanel","setWantPanel","mocks","handleCardClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"26CAGA,IAAMA,EAASC,IAAOC,EAAV,KAYNC,EAAMF,IAAOG,IAAV,KAIHC,EAAOJ,IAAOK,IAAV,KAYJC,EAAeN,IAAOG,IAAV,KAIZI,EAAQP,IAAOQ,GAAV,KAuCIC,MA5Bf,YAA6C,EAA7BC,GAA8B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,MAS1BC,EAASD,EAAQA,EAAME,QAAQ,MAAO,KAAO,GAErD,OACI,kBAAChB,EAAD,CACIiB,KAAK,GACLJ,QAZc,SAACK,GAIjB,OAHAL,IACAK,EAAGC,kBACHD,EAAGE,kBACI,IAUH,kBAACjB,EAAD,CACIkB,mBAAA,gBAA2BN,GAC3BO,IAAK,WAAaV,EAAOW,IAAKT,IAEpC,kBAACT,EAAD,KACI,kBAACE,EAAD,CAAce,IAAI,sBAClB,kBAACd,EAAD,CAAOG,GAAE,gBAAWI,IAAWD,M,2ZC/D7C,IAAMU,EAAQvB,IAAOK,IAAV,KAUiB,SAACmB,GAAD,OAAWA,EAAMC,QAAU,IAAM,WAuB9CC,MAdf,YAA0C,IAA1Bd,EAAyB,EAAzBA,QAASa,EAAgB,EAAhBA,QAASE,EAAO,EAAPA,KAC9B,OACI,kBAACJ,EAAD,CAAOE,QAASA,EAAU,EAAI,GACzBE,EAAO,kBAAC,EAAD,CACAC,IAAKD,EAAKjB,GACVC,MAAOgB,EAAKhB,MACZC,QAASA,EACTC,MAAOc,EAAKd,QAElB,KChCC,yKACVgB,MAAM,SACNC,KAAI,SAAAC,GACD,IAAIC,EAAKD,EAAOE,OAEhB,QAASD,GAAM,CACXtB,GAAIsB,EACJrB,MAAM,GAAD,OAAKqB,EAAL,SACLnB,MAAOmB,MAGdE,QAAO,SAAAH,GAAM,QAAMA,K,iTCJxB,IAAMI,EAAYnC,IAAOK,IAAV,KA6CA+B,EAhCH,WAAO,IAAD,EACoBC,mBAAS,MAD7B,mBACPC,EADO,KACIC,EADJ,OAEoBF,oBAAS,GAF7B,mBAEPG,EAFO,KAEIC,EAFJ,KAad,OACI,kBAACN,EAAD,KACKO,EAAMZ,KAAI,SAAAH,GAAI,OACX,kBAAC,EAAD,CACIC,IAAKD,EAAKjB,GACVC,MAAOgB,EAAKhB,MACZC,QAAS,kBAfD,SAACe,GACrBc,GAAa,GACbF,EAAaZ,GAacgB,CAAgBhB,IAC/Bd,MAAOc,EAAKd,WAGpB,kBAAC,EAAD,CACID,QAfa,WACrB6B,GAAa,IAeLd,KAAMW,EACNb,QAASe,MCnCLI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.454cd35c.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Anchor = styled.a`\n    display: block;\n    margin: 8px 16px;\n    position: relative;\n\n    @media (min-width: 768px) {\n        flex: 0 0 350px; /* Not enough informaiton in screen shots on exact rules here */\n    }\n    @media (min-width: 1024px) {\n        flex: 0 0 385px; /* Not enough informaiton in screen shots on exact rules here */\n    }\n`;\nconst Img = styled.img`\n    width: 100%;\n`;\n\nconst Meta = styled.div`\n    align-items: stretch;\n    bottom: 0;\n    background-color: #00000033; /* TODO */\n    display: flex;\n    height: 2rem; /* TODO */\n    left: 0;\n    padding: 1rem; /* TODO */\n    position: absolute;\n    right: 0;\n    z-index: 1;\n`;\nconst ChannelBrand = styled.img`\n    height: 100%; /* TODO */\n`;\n\nconst Title = styled.h4`\n    color: white; /* TODO */\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 28px; /* TODO */\n    margin: 0 0 0 1rem; /* TODO */\n\n    @media (min-width: 768px) {\n        font-size: 24px; /* TODO */\n    }\n`\n\nfunction Card({ id, image, onClick, title }) {\n\n    const handleClick = (ev) => {\n        onClick()\n        ev.stopPropagation();\n        ev.preventDefault();\n        return false;\n    }\n\n    const handle = title ? title.replace(/\\s/g, '_') : '';\n\n  return (\n      <Anchor\n          href=\"\"\n          onClick={handleClick}\n      >\n            <Img\n                aria-describedby={`title_${handle}`}\n                src={'/assets/' + image} alt={title}\n            ></Img>\n          <Meta>\n              <ChannelBrand src=\"/assets/7plus.png\"></ChannelBrand>\n              <Title id={`title_${handle}`}>{title}</Title>\n            </Meta>\n    </Anchor>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Card from './Card.js'\n\nconst Outer = styled.div`\n    align-items: center;\n    background-color: #fff;\n    bottom: 0;\n    display: flex;\n    justify-content: center;\n    left: 0;\n    position: fixed;\n    top: 0;\n    transition: transform 400ms ease;\n    transform: translateX(${(props) => props.visible ? '0' : '-100%'});\n    width: 100%;\n    z-index: 1;\n\n    @media (min-width: 768px) {\n        width: 50%;\n    }\n`;\n\nfunction Panel({onClick, visible, show}) {\n    return (\n        <Outer visible={visible ? 1 : 0}>\n            {show ? <Card\n                    key={show.id}\n                    image={show.image}\n                    onClick={onClick}\n                    title={show.title}\n                />\n            : ''}\n        </Outer>\n    );\n}\n\nexport default Panel;\n","// TODO - some nifty way of just reading the list of files directly\nexport default 'Gold Digger.jpeg Liar.jpeg Little Women- LA.jpeg MKR.jpeg Pooch Perfect.jpeg Revolution.jpeg Smallville.jpeg The Good Doctor.jpeg The Resident.jpeg Transformed.jpeg'\n    .split('.jpeg')\n    .map(prefix => {\n        let pt = prefix.trim();\n\n        return !!pt && {\n            id: pt,\n            image: `${pt}.jpeg`,\n            title: pt,\n        };\n    })\n    .filter(prefix => !!prefix);\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport Card from './Card.js'\nimport Panel from './Panel.js'\n\nimport mocks from './mocks.js'\n\nconst Container = styled.div`\n    align-items: stretch;\n    display: flex;\n    flex-direction: column;\n    padding: 8px;\n\n    @media (min-width: 768px) {\n        flex-direction: row;\n        flex-wrap: wrap;\n        justify-content: space-between;\n    }\n`;\n\nconst App = () => {\n    const [selection, setSelection] = useState(null);\n    const [wantPanel, setWantPanel] = useState(false);\n\n    const handleCardClick = (show) => {\n        setWantPanel(true);\n        setSelection(show);\n    }\n\n    const handlePanelClick = () => {\n        setWantPanel(false);\n    }\n\n    return (\n        <Container>\n            {mocks.map(show => (\n                <Card\n                    key={show.id}\n                    image={show.image}\n                    onClick={() => handleCardClick(show)}\n                    title={show.title}\n                />\n            ))}\n            <Panel\n                onClick={handlePanelClick}\n                show={selection}\n                visible={wantPanel}\n            />\n        </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}